{"version":3,"sources":["api/api.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","state/todo-lists-reducer.ts","state/tasks-reducer.ts","features/Task/Task.tsx","features/Todolist/Todolist.tsx","app/App.tsx","serviceWorker.ts","Store/Store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","callBack","console","log","useState","title","setTitle","error","setError","addInputItem","trim","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyPress","key","color","size","Button","style","maxWidth","maxHeight","minWidth","minHeight","onClick","disabled","EditableSpan","props","edit","setEdit","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","newTodolistTitle","post","todolistId","delete","newTitle","put","newTaskTitle","taskId","model","REMOVE_TODOLIST","ADD_TODOLIST","RENAME_TODOLIST","CHANGE_FILTER","SET_TODOLIST","initialState","setTodoLists","dispatch","then","res","todoLists","data","type","addNewTodolist","newTodolist","resultCode","item","removeTodolist","todolistID","removeTodolistAC","renameTodolist","ADD_TASK","REMOVE_TASK","SET_TASK","UPDATE_TASK","setTaskForTodolist","task","setTaskAC","items","createTaskForTodolist","removeTaskForTodolist","taskID","removeTaskAC","updateTask","modelDomain","modelAPI","todoListId","updateTaskAC","Task","useDispatch","removeTask","useCallback","changeStatus","status","New","Completed","renameTask","Checkbox","checked","inputProps","IconButton","aria-label","Delete","fontSize","Todolist","filter","useSelector","state","tasks","addTask","newTitleText","changeFilter","changeFilterTodolistAC","renameTodolistHandler","removeTodolistHandler","taskForTodolist","f","useEffect","map","paddingTop","App","todolists","addTodolist","className","Box","flexGrow","AppBar","position","Toolbar","edge","margin","Menu","Typography","component","Container","fixed","Grid","container","padding","spacing","t","Paper","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","todolist","tl","stateCopy","forEach","store","createStore","applyMiddleware","thunk","subscribe","localStorage","setItem","JSON","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f913f7c4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1734c197-25c0-4bdd-9d52-5f9220f3c903'\r\n    }\r\n})\r\n\r\n//API\r\n\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<TodoListsType[]>('todo-lists')\r\n    },\r\n    createTodolist(newTodolistTitle: string) {\r\n        return instance.post<ResponseType<{ item: TodoListsType }>>(`todo-lists`, {title: newTodolistTitle})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(todolistId: string, newTitle: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title: newTitle})\r\n    },\r\n    getTaskForTodolist(todolistId: string) {\r\n        return instance.get<GetTaskResponseType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTaskForTodolist(todolistId: string, newTaskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title: newTaskTitle})\r\n    },\r\n    updateTaskForTodolist(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTaskForTodolist(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type TodoListsType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype ResponseType<D> = {\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: number\r\n    data: D\r\n}\r\ntype GetTaskResponseType = {\r\n    items:TaskType[]\r\n    totalCount:number\r\n    error:string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({callBack}: PropsType) {\r\n    console.log('AddItemForm')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState(false)\r\n\r\n    const addInputItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            callBack(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addInputItem()\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={error}\r\n                id=\"outlined-basic\"\r\n                label=\"Title is required\"\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                color={error ? 'secondary' : 'primary'}\r\n                size=\"small\"\r\n            />\r\n            <Button variant=\"contained\"\r\n                    color='primary'\r\n                    style={{maxWidth: '37px', maxHeight: '70px', minWidth: '37px', minHeight: '39px'}}\r\n                    onClick={addInputItem}\r\n                    disabled={error}\r\n            >+\r\n            </Button>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({callBack, ...props}: PropsType) {\r\n\r\n    console.log(\"EditableSpan is called\")\r\n\r\n    let [edit, setEdit] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n\r\n    const editModeHandler = () => {\r\n        setEdit(true)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        callBack(title)\r\n        setEdit(false)\r\n    }\r\n\r\n    return (\r\n        edit\r\n            ? <TextField\r\n                id=\"standard-basic\"\r\n                autoFocus value={title}\r\n                onChange={onChangeHandler}\r\n                onBlur={onBlurHandler}\r\n                variant=\"standard\"\r\n            />\r\n            : <span onDoubleClick={editModeHandler}>{props.title}</span>\r\n\r\n    )\r\n})","import {todolistAPI, TodoListsType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// constants\r\n\r\nexport const REMOVE_TODOLIST = 'todoLists-reducer/REMOVE-TODOLIST'\r\nexport const ADD_TODOLIST = 'todoLists-reducer/ADD-TODOLIST'\r\nconst RENAME_TODOLIST = 'todoLists-reducer/RENAME-TODOLIST'\r\nconst CHANGE_FILTER = 'todoLists-reducer/CHANGE-FILTER'\r\nexport const SET_TODOLIST = 'todoLists-reducer/SET-TODOLIST'\r\n\r\n\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todoListsReducer = (state: TodolistDomainType[] = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST: {\r\n            return state.filter(todolist => todolist.id !== action.todolistID)\r\n        }\r\n        case ADD_TODOLIST:\r\n            return [{...action.newTodolist, filter: \"all\"}, ...state]\r\n        case RENAME_TODOLIST:\r\n            return state.map(todolist => todolist.id === action.id ? {...todolist, title: action.title} : todolist)\r\n        case CHANGE_FILTER:\r\n            return state.map(todolist => todolist.id === action.id ? {...todolist, filter: action.filter} : todolist)\r\n        case SET_TODOLIST :\r\n            return action.todoLists.map(tl =>({...tl, filter: \"all\"}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\n\r\nexport const removeTodolistAC = (todolistID: string) =>\r\n    ({type: REMOVE_TODOLIST, todolistID} as const)\r\nexport const addTodolistAC = (newTodolist: TodoListsType) =>\r\n    ({type: ADD_TODOLIST, newTodolist} as const)\r\nexport const renameTodolistAC = (id: string, title: string) =>\r\n    ({type: RENAME_TODOLIST, id, title} as const)\r\nexport const changeFilterTodolistAC = (id: string, filter: FilterValueType) =>\r\n    ({type: CHANGE_FILTER, filter, id} as const)\r\nexport const setTodoListsAC = (todoLists: TodoListsType[]) =>\r\n    ({type: SET_TODOLIST, todoLists: todoLists} as const)\r\n\r\n\r\n// thunks\r\nexport const setTodoLists = () => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.getTodolist()\r\n        .then(res => {\r\n            dispatch(setTodoListsAC(res.data))\r\n        })\r\n}\r\n\r\nexport const addNewTodolist = (newTodolistTitle: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.createTodolist(newTodolistTitle)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            }\r\n        })\r\n}\r\n\r\nexport const removeTodolist = (todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.deleteTodolist(todolistID)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistID))\r\n            }\r\n        })\r\n}\r\n\r\nexport const renameTodolist = (todolistID: string, newTitle: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.updateTodolistTitle(todolistID, newTitle)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(renameTodolistAC(todolistID, newTitle))\r\n            }\r\n        })\r\n}\r\n\r\n//types\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof renameTodolistAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"complete\"\r\n\r\nexport type TodolistDomainType = TodoListsType & {\r\n    filter: FilterValueType\r\n}\r\n\r\n","import {\r\n    ADD_TODOLIST,\r\n    addTodolistAC,\r\n    REMOVE_TODOLIST,\r\n    removeTodolistAC,\r\n    SET_TODOLIST,\r\n    setTodoListsAC\r\n} from \"./todo-lists-reducer\";\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistAPI,\r\n    UpdateTaskModelType\r\n} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n// constants\r\n\r\nconst ADD_TASK = 'task-reducer/ADD-TASK'\r\nconst REMOVE_TASK = 'task-reducer/REMOVE-TASK'\r\nconst SET_TASK = 'task-reducer/SET-TASK'\r\nconst UPDATE_TASK = 'task-reducer/UPDATE_TASK'\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            return {...state,\r\n                [action.task.todoListId] : [action.task, ...state[action.task.todoListId]]\r\n            };\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].filter(task => task.id !== action.taskID)\r\n            }\r\n        case SET_TODOLIST: {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case ADD_TODOLIST: {\r\n            return {...state, [action.newTodolist.id]: []}\r\n        }\r\n        case REMOVE_TODOLIST:\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.todolistID]\r\n            return stateCopy\r\n        case SET_TASK:\r\n            return {...state,\r\n                [action.todolistID]:[...action.task]\r\n            }\r\n        case UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: state[action.task.todoListId]\r\n                    .map(task => task.id === action.task.id ? {...task, ...action.task} : task)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: ADD_TASK, task} as const)\r\nexport const removeTaskAC = (todolistID: string, taskID: string) =>\r\n    ({type: REMOVE_TASK, taskID, todolistID} as const)\r\nexport const setTaskAC = (task: TaskType[], todolistID: string) =>\r\n    ({type: SET_TASK, task, todolistID} as const)\r\nexport const updateTaskAC = (task: TaskType) => ({type: UPDATE_TASK, task} as const)\r\n\r\n\r\n//thunk\r\n\r\nexport const setTaskForTodolist = (todolistID: string) => (dispatch: Dispatch<TaskActionsType>) => {\r\n    todolistAPI.getTaskForTodolist(todolistID)\r\n        .then(res => {\r\n            dispatch(setTaskAC(res.data.items, todolistID))\r\n        })\r\n}\r\n\r\nexport const createTaskForTodolist = (todolistID: string, newTaskTitle: string) => (dispatch: Dispatch<TaskActionsType>) => {\r\n    todolistAPI.createTaskForTodolist(todolistID, newTaskTitle)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n            }\r\n        })\r\n}\r\n\r\nexport const removeTaskForTodolist = (todolistID: string, taskID: string) => (dispatch: Dispatch<TaskActionsType>) => {\r\n    todolistAPI.deleteTaskForTodolist(todolistID, taskID)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(todolistID, taskID))\r\n            }\r\n        })\r\n}\r\n\r\nexport const updateTask = (task: TaskType, modelDomain: UpdateDomainTaskModelType) => (dispatch: Dispatch<TaskActionsType>) => {\r\n    let modelAPI: UpdateTaskModelType = {\r\n        ...task,\r\n        ...modelDomain\r\n    } as UpdateTaskModelType\r\n    todolistAPI.updateTaskForTodolist(task.todoListId, task.id, modelAPI)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(res.data.data.item))\r\n            }\r\n        })\r\n}\r\n\r\n//types\r\n\r\ntype TaskActionsType =\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTaskForTodolist, updateTask} from \"../../state/tasks-reducer\";\r\nimport {EditableSpan} from \"../../Components/EditableSpan/EditableSpan\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../api/api\";\r\n\r\ntype TaskPropsType = {\r\n    todolistID: string\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo(function ({task, todolistID}: TaskPropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskForTodolist(todolistID, task.id))\r\n    }, [dispatch, todolistID, task.id])\r\n\r\n    const changeStatus = useCallback(() => {\r\n        let  status = task.status === TaskStatuses.New ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTask(task, {status}))\r\n    }, [dispatch, task])\r\n\r\n    const renameTask = useCallback((title: string) => {\r\n        dispatch(updateTask(task, {title}))\r\n    }, [dispatch, task])\r\n\r\n\r\n    return (\r\n        <div key={task.id}>\r\n            <EditableSpan title={task.title} callBack={renameTask}/>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color={\"primary\"}\r\n                onChange={changeStatus}\r\n                inputProps={{'aria-label': 'controlled'}}\r\n                size='small'\r\n            />\r\n            <IconButton aria-label=\"delete\" onClick={removeTask}>\r\n                <Delete fontSize=\"inherit\"/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../Components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {createTaskForTodolist, setTaskForTodolist} from \"../../state/tasks-reducer\";\r\nimport {changeFilterTodolistAC, FilterValueType, removeTodolist, renameTodolist} from \"../../state/todo-lists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../Store/Store\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../api/api\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    todolistID: string\r\n    filter: FilterValueType\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(function ({filter, todolistID, ...props}: PropsType) {\r\n\r\n    console.log(\"Todolist is called\")\r\n\r\n    const dispatch = useDispatch()\r\n    const task = useSelector<AppRootState, TaskType[]>(state => state.tasks[todolistID])\r\n\r\n    const addTask = useCallback((newTitleText: string) => {\r\n        dispatch(createTaskForTodolist(todolistID, newTitleText))\r\n    }, [dispatch, todolistID])\r\n\r\n    const changeFilter = useCallback((value: FilterValueType) => {\r\n        dispatch(changeFilterTodolistAC(todolistID, value))\r\n    }, [dispatch, todolistID])\r\n\r\n    const renameTodolistHandler = useCallback((newTitle: string) => {\r\n        dispatch(renameTodolist(todolistID, newTitle))\r\n    }, [dispatch, todolistID])\r\n\r\n    const removeTodolistHandler = useCallback(() => {\r\n        dispatch(removeTodolist(todolistID))\r\n    }, [dispatch, todolistID])\r\n\r\n    let taskForTodolist = task;\r\n    if (filter === \"active\") {\r\n        taskForTodolist = task.filter(f => f.status === TaskStatuses.New)\r\n    }\r\n    if (filter === \"complete\") {\r\n        taskForTodolist = task.filter(f => f.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(setTaskForTodolist(todolistID))\r\n    }, [dispatch, todolistID])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} callBack={renameTodolistHandler}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTodolistHandler}>\r\n                    <Delete fontSize=\"inherit\"/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callBack={addTask}/>\r\n            {taskForTodolist.map(task =>\r\n                <Task\r\n                    task={task}\r\n                    todolistID={todolistID}\r\n                    key={task.id}\r\n                />\r\n            )}\r\n            <div style={{paddingTop: \"5px\"}}>\r\n                <Button variant={filter === 'all' ? \"contained\" : 'outlined'} color=\"primary\"\r\n                        onClick={() => changeFilter('all')}>All</Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : 'outlined'} color=\"primary\"\r\n                        onClick={() => changeFilter('active')}>Active</Button>\r\n                <Button variant={filter === 'complete' ? \"contained\" : 'outlined'} color=\"primary\"\r\n                        onClick={() => changeFilter('complete')}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"../features/Todolist/Todolist\";\r\nimport {AddItemForm} from \"../Components/AddItemForm/AddItemForm\";\r\nimport {addNewTodolist, setTodoLists, TodolistDomainType} from \"../state/todo-lists-reducer\";\r\nimport {AppBar, Box, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../Store/Store\";\r\n\r\n\r\nfunction App() {\r\n    console.log(\"APP is called\")\r\n    const dispatch = useDispatch()\r\n\r\n    const todoLists = useSelector<AppRootState, TodolistDomainType[]>(state => state.todolists)\r\n\r\n    const addTodolist = useCallback((newTitle: string) => {\r\n        dispatch(addNewTodolist(newTitle))\r\n    }, [dispatch])\r\n\r\n    useEffect(()=>{\r\n        dispatch(setTodoLists())\r\n    },[dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Box style={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"medium\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            style={{margin: 2}}\r\n                        >\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" style={{flexGrow: 1}}>\r\n                            Your Todolist\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(t => {\r\n                        return (\r\n                            <Grid item key={t.id}>\r\n                                <Paper style={{padding: \"10px\"}} key={t.id}>\r\n                                    <Todolist\r\n                                        key={t.id}\r\n                                        title={t.title}\r\n                                        todolistID={t.id}\r\n                                        filter={t.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}</Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"../state/todo-lists-reducer\";\r\nimport {tasksReducer} from \"../state/tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    todolists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\n// let preloadedState;\r\n// const persistedTodolistString = localStorage.getItem(\"appState\")\r\n// if (persistedTodolistString){\r\n//     preloadedState = JSON.parse(persistedTodolistString)\r\n// }\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nstore.subscribe(()=>{\r\n    localStorage.setItem(\"appState\", JSON.stringify(store.getState()))\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Store/Store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}