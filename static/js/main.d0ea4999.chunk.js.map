{"version":3,"sources":["Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","state/tasks-reducer.ts","Components/Todolist/Todolist.tsx","state/todolists-reducer.ts","App.tsx","serviceWorker.ts","Store/Store.ts","index.tsx"],"names":["AddItemForm","callBack","useState","title","setTitle","error","setError","addInputItem","trim","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyPress","key","color","size","Button","style","maxWidth","maxHeight","minWidth","minHeight","onClick","disabled","EditableSpan","props","edit","setEdit","autoFocus","onBlur","onDoubleClick","initialState","Todolist","todolistID","filter","dispatch","useDispatch","task","useSelector","state","tasks","changeFilterCallback","changeFilter","taskForTodolist","f","isDone","newTitle","renameTodolist","IconButton","aria-label","Delete","fontSize","removeTodolist","newTitleText","newTaskText","type","addTaskAC","map","m","taskID","renameTaskAC","Checkbox","checked","changeCheckedAC","inputProps","titleID","removeTaskAC","paddingTop","App","todolists","removeTodolistAC","className","Box","flexGrow","AppBar","position","Toolbar","edge","margin","Menu","Typography","component","Container","fixed","Grid","container","padding","newTodolistId","v1","spacing","t","item","Paper","Boolean","window","location","hostname","match","preloadedState","rootReducer","combineReducers","action","todolist","stateCopy","persistedTodolistString","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d0ea4999.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<PropsType> = ({callBack}) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState(false)\r\n\r\n    const addInputItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            callBack(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addInputItem()\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={error}\r\n                id=\"outlined-basic\"\r\n                label=\"Title is required\"\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                color={error ? 'secondary' : 'primary'}\r\n                size=\"small\"\r\n            />\r\n            <Button variant=\"contained\"\r\n                    color='primary'\r\n                    style={{maxWidth: '37px', maxHeight: '70px', minWidth: '37px', minHeight: '39px'}}\r\n                    onClick={addInputItem}\r\n                    disabled={error}\r\n            >+\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<PropsType> = ({callBack, ...props}) => {\r\n\r\n    let [edit, setEdit] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n\r\n    const editModeHandler = () => {\r\n        setEdit(true)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        callBack(title)\r\n        setEdit(false)\r\n    }\r\n\r\n    return (\r\n            edit\r\n                ? <TextField\r\n                    id=\"standard-basic\"\r\n                    autoFocus value={title}\r\n                    onChange={onChangeHandler}\r\n                    onBlur={onBlurHandler}\r\n                    variant=\"standard\"\r\n                />\r\n                : <span onDoubleClick={editModeHandler}>{props.title}</span>\r\n\r\n    )\r\n}","import {v1} from \"uuid\";\r\nimport {addTodolistAC, removeTodolistAC} from \"./todolists-reducer\";\r\n\r\ntype TaskActionsType =\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof changeCheckedAC>\r\n    | ReturnType<typeof renameTaskAC>\r\n\r\nexport type TaskType = { id: string, title: string, isDone: boolean }\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.newTodolistId]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.todolistID]\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: [{id: v1(), title: action.newTaskText, isDone: false},\r\n                    ...state[action.todolistID]]\r\n            }\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].filter(task => task.id !== action.titleID)\r\n            }\r\n        }\r\n        case \"CHANGE-CHECKED\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(task => task.id === action.taskID ? {\r\n                    ...task,\r\n                    isDone: action.isDone\r\n                } : task)\r\n            }\r\n        }\r\n        case \"RENAME-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(task => task.id === action.taskID ? {\r\n                    ...task,\r\n                    title: action.newTitle\r\n                } : task)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addTaskAC = (todolistID: string, newTaskText: string) => {\r\n    return {type: \"ADD-TASK\", todolistID, newTaskText} as const\r\n}\r\nexport const removeTaskAC = (todolistID: string, titleID: string) => {\r\n    return {type: \"REMOVE-TASK\", titleID, todolistID} as const\r\n}\r\nexport const changeCheckedAC = (isDone: boolean, todolistID: string, taskID: string) => {\r\n    return {type: \"CHANGE-CHECKED\", isDone, todolistID, taskID} as const\r\n}\r\nexport const renameTaskAC = (newTitle: string, todolistID: string, taskID: string) => {\r\n    return {type: \"RENAME-TASK\", newTitle, todolistID, taskID} as const\r\n}\r\nexport const removeTaskArrayAfterRemoveTodolist = (todolistID: string) => {\r\n    return {type: \"REMOVE-TASK-ARRAY-FOR-TODOLIST\", todolistID: todolistID} as const\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {addTaskAC, changeCheckedAC, removeTaskAC, renameTaskAC, TaskType} from \"../../state/tasks-reducer\";\r\nimport {FilterValueType} from \"../../state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../Store/Store\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    todolistID: string\r\n    changeFilter: (value: FilterValueType, todolistID: string) => void\r\n    filter: FilterValueType\r\n    renameTodolist: (newTitle: string, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = ({todolistID, filter, ...props}) => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const task = useSelector<AppRootState, TaskType[]>(state => state.tasks[todolistID])\r\n\r\n\r\n    const callBackFromAddTask = (newTitleText: string) => {\r\n        dispatch(addTaskAC(todolistID, newTitleText))\r\n    }\r\n\r\n    const changeFilterCallback = (value: FilterValueType) => {\r\n        props.changeFilter(value, todolistID)\r\n    }\r\n    const changeTodolistNameCallBack = (newTitle: string) => {\r\n        props.renameTodolist(newTitle, todolistID)\r\n    }\r\n    const callBackFromRemoveTodolist = () => {\r\n        props.removeTodolist(todolistID)\r\n    }\r\n\r\n    let taskForTodolist = task;\r\n    if (filter === \"active\") {\r\n        taskForTodolist = task.filter(f => !f.isDone)\r\n    }\r\n    if (filter === \"complete\") {\r\n        taskForTodolist = task.filter(f => f.isDone)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} callBack={changeTodolistNameCallBack}/>\r\n                <IconButton aria-label=\"delete\">\r\n                    <Delete fontSize=\"inherit\" onClick={callBackFromRemoveTodolist}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callBack={callBackFromAddTask}/>\r\n            {taskForTodolist.map(m => {\r\n                const callBackFromRemoveTask = () => {\r\n                    dispatch(removeTaskAC(todolistID, m.id))\r\n                }\r\n                const changeIsDoneCallBack = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    dispatch(changeCheckedAC(e.currentTarget.checked, todolistID, m.id))\r\n                }\r\n                const callBackForRenameTask = (newTitle: string) => {\r\n                    dispatch(renameTaskAC(newTitle, todolistID, m.id))\r\n                }\r\n\r\n                return (\r\n                    <div key={m.id}>\r\n                        <EditableSpan title={m.title} callBack={callBackForRenameTask}/>\r\n                        <Checkbox\r\n                            checked={m.isDone}\r\n                            color={\"primary\"}\r\n                            onChange={changeIsDoneCallBack}\r\n                            inputProps={{'aria-label': 'controlled'}}\r\n                            size='small'\r\n                        />\r\n                        <IconButton aria-label=\"delete\">\r\n                            <Delete fontSize=\"inherit\" onClick={callBackFromRemoveTask}/>\r\n                        </IconButton>\r\n                    </div>\r\n                )\r\n            })}\r\n            <div style={{paddingTop : \"5px\"}}>\r\n                <Button variant={filter === 'all' ? \"contained\" : 'outlined'} color=\"primary\"\r\n                        onClick={() => changeFilterCallback('all')}>All</Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : 'outlined'} color=\"primary\"\r\n                        onClick={() => changeFilterCallback('active')}>Active</Button>\r\n                <Button variant={filter === 'complete' ? \"contained\" : 'outlined'} color=\"primary\"\r\n                        onClick={() => changeFilterCallback('complete')}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {v1} from \"uuid\";\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof renameTodolistAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"complete\"\r\nexport type TodoListsType = { id: string, title: string, filter: FilterValueType }\r\n\r\n\r\nconst initialState: TodoListsType[] = []\r\n\r\nexport const todolistsReducer = (state: TodoListsType[] = initialState, action: ActionsType): TodoListsType[] => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(todolist => todolist.id !== action.todolistID)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [{id: action.newTodolistId, title: action.title, filter: \"all\"}, ...state]\r\n        }\r\n        case \"RENAME-TODOLIST\": {\r\n            return state.map(todolist => todolist.id === action.id ? {...todolist, title: action.title} : todolist)\r\n        }\r\n        case \"CHANGE-FILTER\": {\r\n            return state.map(todolist => todolist.id === action.id ? {...todolist, filter: action.filter} : todolist)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistID: string) => {\r\n    return {type: \"REMOVE-TODOLIST\", todolistID} as const\r\n}\r\n\r\nexport const addTodolistAC = (title: string) => {\r\n    return {type: \"ADD-TODOLIST\", title: title, newTodolistId: v1()} as const\r\n}\r\n\r\nexport const renameTodolistAC = (id: string, title: string) => {\r\n    return {type: \"RENAME-TODOLIST\", id: id, title: title} as const\r\n}\r\nexport const changeFilterTodolistAC = (id: string, filter: FilterValueType) => {\r\n    return {type: \"CHANGE-FILTER\", filter: filter, id: id} as const\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Components/Todolist/Todolist\";\r\nimport {AddItemForm} from \"./Components/AddItemForm/AddItemForm\";\r\nimport {\r\n    addTodolistAC,\r\n    changeFilterTodolistAC, FilterValueType,\r\n    removeTodolistAC,\r\n    renameTodolistAC,\r\n    TodoListsType,\r\n} from \"./state/todolists-reducer\";\r\nimport {AppBar, Box, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./Store/Store\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n\r\n    const todolists = useSelector<AppRootState, TodoListsType[]>(state => state.todolists)\r\n\r\n    const addTodolist = (newTitle: string) => {\r\n        dispatch(addTodolistAC(newTitle))\r\n    }\r\n    const removeTodolist = (todolistID: string) => {\r\n        dispatch(removeTodolistAC(todolistID))\r\n    }\r\n    const renameTodolist = (newTitle: string, todolistID: string) => {\r\n        dispatch(renameTodolistAC(todolistID, newTitle))\r\n    }\r\n    const changeFilter = (value: FilterValueType, todolistID: string) => {\r\n        dispatch(changeFilterTodolistAC(todolistID, value))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Box style={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"medium\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            style={{margin: 2}}\r\n                        >\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" style={{flexGrow: 1}}>\r\n                            Your Todolist\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(t => {\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={t.id}\r\n                                        title={t.title}\r\n                                        todolistID={t.id}\r\n                                        changeFilter={changeFilter}\r\n                                        filter={t.filter}\r\n                                        renameTodolist={renameTodolist}\r\n                                        removeTodolist={removeTodolist}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}</Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"../state/todolists-reducer\";\r\nimport {tasksReducer} from \"../state/tasks-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nlet preloadedState;\r\nconst persistedTodolistString = localStorage.getItem(\"appState\")\r\nif (persistedTodolistString){\r\n    preloadedState = JSON.parse(persistedTodolistString)\r\n}\r\n\r\nexport const store = createStore(rootReducer,preloadedState)\r\n\r\nstore.subscribe(()=>{\r\n    localStorage.setItem(\"appState\", JSON.stringify(store.getState()))\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Store/Store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}