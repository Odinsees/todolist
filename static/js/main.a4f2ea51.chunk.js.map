{"version":3,"sources":["Todolist.module.css","App.module.css","Components/AddItemForm.module.css","Components/EditableSpan.module.css","Components/ButtonFC.tsx","Components/AddItemForm.tsx","Components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ButtonFC","title","callBack","error","className","variant","color","onClickHandler","iconButton","IconButton","aria-label","onClick","Delete","Button","disabled","AddItemForm","useState","setTitle","setError","addInputItem","trim","onChangeHandler","e","currentTarget","value","s","content","ref","textField","TextField","id","label","helperText","onChange","onKeyPress","key","errorInput","EditableSpan","props","edit","setEdit","editSpan","autoFocus","onBlur","onDoubleClick","Todolist","todolistID","filter","changeFilterCallback","changeFilter","newTitle","renameTodolist","removeTodolist","newTitleText","addTask","task","map","m","renameTask","taskCheckBox","Checkbox","checked","isDone","changeChecked","inputProps","removeTaskBTN","removeTask","buttonBox","App","todolistId1","v1","todolistId2","todolists","setTodolists","tasks","setTasks","newTaskText","titleID","f","taskID","addForm","newTodolist","todolistComponent","t","taskForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a4f2ea51.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Todolist_content__2cG_M\",\"task\":\"Todolist_task__3IWJI\",\"title\":\"Todolist_title__4v1tN\",\"editSpan\":\"Todolist_editSpan__XUGXY\",\"taskCheckBox\":\"Todolist_taskCheckBox__3R6bf\",\"buttonBox\":\"Todolist_buttonBox__3xbXR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3jUgO\",\"addForm\":\"App_addForm__11Uzk\",\"todolistComponent\":\"App_todolistComponent__3kZaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"AddItemForm_content__2lgB3\",\"textField\":\"AddItemForm_textField__1jKhe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editSpan\":\"EditableSpan_editSpan__evPLN\"};","import React from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport s from \"./ButtonFC.module.css\"\r\n\r\ntype PropsType = {\r\n    title?: string\r\n    callBack: () => void\r\n    error?: string | null\r\n    className?: string\r\n    variant?: \"outlined\" | \"contained\" | \"text\" | undefined\r\n    color?: \"inherit\" | \"primary\" | \"secondary\" | \"default\" | undefined\r\n    iconButton?: boolean\r\n}\r\n\r\nexport const ButtonFC: React.FC<PropsType> = ({title, callBack, error, className, variant, color, iconButton}) => {\r\n\r\n    const onClickHandler = () => {\r\n        callBack()\r\n    }\r\n\r\n    return (\r\n                iconButton\r\n                    ?\r\n                    <IconButton\r\n                        aria-label=\"delete\"\r\n                        color=\"primary\"\r\n                        onClick={onClickHandler}\r\n                    >\r\n                        <Delete />\r\n                    </IconButton>\r\n                    :\r\n                    <Button\r\n                        variant={variant}\r\n                        color={color}\r\n                        disabled={!!error}\r\n                        onClick={onClickHandler}\r\n                        className={className}\r\n                    >{title}</Button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {ButtonFC} from \"./ButtonFC\";\r\nimport s from \"./AddItemForm.module.css\"\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<PropsType> = ({callBack}) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addInputItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            callBack(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addInputItem()\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    /*const onBlurHandler = () =>{\r\n        setError(null)\r\n    }\r\n*/\r\n    return (\r\n        <div className={s.content}>\r\n            {error\r\n                ?\r\n                <div ref={'input'} className={s.textField}>\r\n                    <TextField\r\n                        error\r\n                        id=\"outlined-error-helper-text\"\r\n                        label={error}\r\n                        helperText=\"Incorrect entry.\"\r\n                        value={title}\r\n                        onChange={onChangeHandler}\r\n                        /*onBlur={onBlurHandler}*/\r\n                    />\r\n                </div>\r\n                :\r\n                <div className={s.textField}>\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        variant=\"outlined\"\r\n                        value={title}\r\n                        onChange={onChangeHandler}\r\n                        onKeyPress={onKeyPressHandler}\r\n                        className={error ? s.errorInput : ''}\r\n                    />\r\n                </div>\r\n            }\r\n            <ButtonFC\r\n                callBack={addInputItem}\r\n                title={'+'}\r\n                error={error}\r\n                variant={'contained'}\r\n                color={\"primary\"}\r\n                iconButton={false}\r\n            />\r\n            {/*{error ? <div className={s.error}>{error}</div> : \"\"}*/}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\nimport s from \"./EditableSpan.module.css\"\r\n\r\ntype PropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<PropsType> = ({callBack, ...props}) => {\r\n\r\n    let [edit, setEdit] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n\r\n    const editModeHandler = () => {\r\n        setEdit(true)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        callBack(title)\r\n        setEdit(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.editSpan}>\r\n            {edit\r\n                ? <TextField\r\n                    id=\"standard-basic\"\r\n                    autoFocus value={title}\r\n                    onChange={onChangeHandler}\r\n                    onBlur={onBlurHandler}\r\n                    variant=\"standard\"\r\n                />\r\n                : <span onDoubleClick={editModeHandler}>{props.title}</span>}\r\n        </div>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType, TaskType} from \"./App\";\r\nimport {ButtonFC} from \"./Components/ButtonFC\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {EditableSpan} from \"./Components/EditableSpan\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport s from \"./Todolist.module.css\"\r\n\r\ntype PropsType = {\r\n    title: string\r\n    task: TaskType[]\r\n    todolistID: string\r\n    removeTask: (todolistID: string, titleID: string) => void\r\n    addTask: (todolistID: string, newTitleText: string) => void\r\n    changeFilter: (value: FilterValueType, todolistID: string) => void\r\n    changeChecked: (isDone: boolean, todolistID: string, taskID: string) => void\r\n    filter: FilterValueType\r\n    renameTask: (newTitle: string, todolistID: string, taskID: string) => void\r\n    renameTodolist: (newTitle: string, todolistID: string) => void\r\n    removeTodolist:(todolistID: string)=>void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = ({todolistID, filter, ...props}) => {\r\n\r\n    const callBackFromAddTask = (newTitleText: string) => {\r\n        props.addTask(todolistID, newTitleText)\r\n    }\r\n\r\n    const changeFilterCallback = (value: FilterValueType) => {\r\n        props.changeFilter(value, todolistID)\r\n    }\r\n\r\n    const changeTodolistNameCallBack = (newTitle: string) => {\r\n        props.renameTodolist(newTitle, todolistID)\r\n    }\r\n\r\n    const callBackFromRemoveTodolist = () => {\r\n        props.removeTodolist(todolistID)\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.title}>\r\n                <h3><EditableSpan title={props.title} callBack={changeTodolistNameCallBack}/></h3>\r\n                <ButtonFC callBack={callBackFromRemoveTodolist} iconButton={true}/>\r\n            </div>\r\n            <div>\r\n                <AddItemForm callBack={callBackFromAddTask}/>\r\n            </div>\r\n                {props.task.map(m => {\r\n                    const callBackFromRemoveTask = () => {\r\n                        props.removeTask(m.id, todolistID)\r\n                    }\r\n\r\n                    const changeIsDoneCallBack = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeChecked(e.currentTarget.checked, todolistID, m.id)\r\n                    }\r\n\r\n                    const callBackForRenameTask = (newTitle: string) => {\r\n                        props.renameTask(newTitle, todolistID, m.id)\r\n                    }\r\n\r\n                    return (\r\n                        <div key={m.id} className={s.task}>\r\n                            <div className={s.editSpan}>\r\n                                <EditableSpan title={m.title} callBack={callBackForRenameTask}/>\r\n                            </div>\r\n                            <div className={s.taskCheckBox}>\r\n                                <Checkbox\r\n                                    checked={m.isDone}\r\n                                    color={\"primary\"}\r\n                                    onChange={changeIsDoneCallBack}\r\n                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                />\r\n                            </div>\r\n                            <div className={s.removeTaskBTN}>\r\n                                <ButtonFC callBack={callBackFromRemoveTask} iconButton={true}/>\r\n                            </div>\r\n                        </div>\r\n\r\n                    )\r\n                })}\r\n            <div className={s.buttonBox}>\r\n                <ButtonFC\r\n                    callBack={() => changeFilterCallback('all')}\r\n                    title={\"All\"}\r\n                    variant={filter === 'all'\r\n                        ? 'contained'\r\n                        : 'outlined'}\r\n                    color={\"primary\"}\r\n                    iconButton={false}\r\n                />\r\n                <ButtonFC\r\n                    callBack={() => changeFilterCallback('active')}\r\n                    title={\"Active\"}\r\n                    variant={filter === 'active'\r\n                        ? 'contained'\r\n                        : 'outlined'}\r\n                    color={\"primary\"}\r\n                    iconButton={false}\r\n                />\r\n                <ButtonFC\r\n                    callBack={() => changeFilterCallback('complete')}\r\n                    title={\"Completed\"}\r\n                    variant={filter === 'complete'\r\n                        ? 'contained'\r\n                        : 'outlined'}\r\n                    color={\"primary\"}\r\n                    iconButton={false}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.module.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport s from \"./App.module.css\"\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"complete\"\r\nexport type TodoListsType = { id: string, title: string, filter: FilterValueType }\r\nexport type TaskType = { id: string, title: string, isDone: boolean }\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodoListsType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: false}\r\n        ]\r\n    });\r\n\r\n    const addTodolist = (newTitle: string) => {\r\n        let newTodolist: TodoListsType = {id: v1(), title: newTitle, filter: \"all\"}\r\n        setTodolists([...todolists, newTodolist])\r\n        setTasks({...tasks, [newTodolist.id]: []})\r\n    }\r\n\r\n    const addTask = (todolistID: string, newTaskText: string) => {\r\n        setTasks({...tasks, [todolistID]: [{id: v1(), title: newTaskText, isDone: false}, ...tasks[todolistID]]})\r\n    }\r\n\r\n    const removeTask = (titleID: string, todolistID: string) => {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(f => f.id !== titleID)})\r\n    }\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(m => m.id !== todolistID))\r\n    }\r\n\r\n    const changeFilter = (value: FilterValueType, todolistID: string) => {\r\n        setTodolists(todolists.map(m => m.id === todolistID ? {...m, filter: value} : m))\r\n    }\r\n\r\n    const changeChecked = (isDone: boolean, todolistID: string, taskID: string) => {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(m => m.id === taskID ? {...m, isDone: isDone} : m)})\r\n    }\r\n\r\n    const renameTask = (newTitle: string, todolistID: string, taskID: string) => {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(m => m.id === taskID ? {...m, title: newTitle} : m)})\r\n    }\r\n\r\n    const renameTodolist = (newTitle: string, todolistID: string) => {\r\n        setTodolists(todolists.map(m => m.id === todolistID ? {...m, title: newTitle} : m))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = {s.App}>\r\n            <div className={s.addForm}>\r\n                <h3>Add Todolist</h3>\r\n                <AddItemForm callBack={addTodolist}/>\r\n            </div>\r\n            <div className={s.todolistComponent}>\r\n                {todolists.map(t => {\r\n                    let taskForTodolist = tasks[t.id];\r\n                    if (t.filter === \"active\") {\r\n                        taskForTodolist = tasks[t.id].filter(f => !f.isDone)\r\n                    }\r\n                    if (t.filter === \"complete\") {\r\n                        taskForTodolist = tasks[t.id].filter(f => f.isDone)\r\n                    }\r\n                    return (\r\n                        <Todolist\r\n                            key={t.id}\r\n                            title={t.title}\r\n                            task={taskForTodolist}\r\n                            todolistID={t.id}\r\n                            removeTask={removeTask}\r\n                            addTask={addTask}\r\n                            changeFilter={changeFilter}\r\n                            changeChecked={changeChecked}\r\n                            filter={t.filter}\r\n                            renameTask={renameTask}\r\n                            renameTodolist={renameTodolist}\r\n                            removeTodolist={removeTodolist}\r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}